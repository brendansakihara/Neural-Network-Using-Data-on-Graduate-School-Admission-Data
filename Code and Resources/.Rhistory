knitr::opts_chunk$set(echo = TRUE)
library(neuralnet)
library(readxl)
train <- read_excel("training_data.xlsx")
train$gre <- (train$gre - min(train$gre))/(max(train$gre) - min(train$gre))
train$gpa <- (train$gpa - min(train$gpa))/(max(train$gpa) - min(train$gpa))
train$rank <- (train$rank - min(train$rank))/(max(train$rank) - min(train$rank))
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "sse", act.fct = "logistic", linear.output = FALSE)
plot(network, rep = "best")
network$result.matrix
test <- read_excel("test_data.xlsx")
test$gre <- (test$gre - min(test$gre))/(max(test$gre) - min(test$gre))
test$gpa <- (test$gpa - min(test$gpa))/(max(test$gpa) - min(test$gpa))
test$rank <- (test$rank - min(test$rank))/(max(test$rank) - min(test$rank))
Predict = compute(network,test)
Predict$net.result
prob <- Predict$net.result
pred <- ifelse(prob > 0.5, 1, 0)
pred
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "sse", act.fct = "logistic", linear.output = FALSE, rep = 5)
plot(network, rep = 1)
plot(network, rep = 2)
plot(network, rep = 3)
plot(network, rep = 4)
plot(network, rep = 5)
network$result.matrix
train <- read_excel("big_training_data.xlsx")
train <- read_excel("big_training_data.xlsx")
train <- read_excel("big_training_data.xlsx")
train$gre <- (train$gre - min(train$gre))/(max(train$gre) - min(train$gre))
train$gpa <- (train$gpa - min(train$gpa))/(max(train$gpa) - min(train$gpa))
train$rank <- (train$rank - min(train$rank))/(max(train$rank) - min(train$rank))
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "sse", act.fct = "logistic", linear.output = FALSE, rep = 5)
plot(network, rep = 1)
plot(network, rep = 2)
plot(network, rep = 3)
plot(network, rep = 4)
plot(network, rep = 5)
network$result.matrix
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "ce", act.fct = "logistic", linear.output = FALSE, rep = 5)
plot(network, rep = 1)
plot(network, rep = 2)
plot(network, rep = 3)
plot(network, rep = 4)
plot(network, rep = 5)
network$result.matrix
test <- read_excel("test_data.xlsx")
test$gre <- (test$gre - min(test$gre))/(max(test$gre) - min(test$gre))
test$gpa <- (test$gpa - min(test$gpa))/(max(test$gpa) - min(test$gpa))
test$rank <- (test$rank - min(test$rank))/(max(test$rank) - min(test$rank))
Predict = compute(network,test)
Predict$net.result
prob <- Predict$net.result
pred <- ifelse(prob > 0.5, 1, 0)
pred
Predict = compute(network,test, rep = "best")
Predict = compute(network,test)
Predict$net.result
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "ce", act.fct = "logistic", linear.output = FALSE, rep = 5)
network$result.matrix
test <- read_excel("test_data.xlsx")
test$gre <- (test$gre - min(test$gre))/(max(test$gre) - min(test$gre))
test$gpa <- (test$gpa - min(test$gpa))/(max(test$gpa) - min(test$gpa))
test$rank <- (test$rank - min(test$rank))/(max(test$rank) - min(test$rank))
Predict = compute(network,test)
Predict$net.result
prob <- Predict$net.result
pred <- ifelse(prob > 0.5, 1, 0)
pred
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "sse", act.fct = "logistic", linear.output = FALSE, rep = 5)
plot(network, rep = 1)
plot(network, rep = 2)
plot(network, rep = 3)
plot(network, rep = 4)
plot(network, rep = 5)
network$result.matrix
test <- read_excel("test_data.xlsx")
test$gre <- (test$gre - min(test$gre))/(max(test$gre) - min(test$gre))
test$gpa <- (test$gpa - min(test$gpa))/(max(test$gpa) - min(test$gpa))
test$rank <- (test$rank - min(test$rank))/(max(test$rank) - min(test$rank))
Predict = compute(network,test)
Predict$net.result
prob <- Predict$net.result
pred <- ifelse(prob > 0.5, 1, 0)
pred
train <- read_excel("training_data.xlsx")
train <- read_excel("training_data.xlsx")
train$gre <- (train$gre - min(train$gre))/(max(train$gre) - min(train$gre))
train$gpa <- (train$gpa - min(train$gpa))/(max(train$gpa) - min(train$gpa))
train$rank <- (train$rank - min(train$rank))/(max(train$rank) - min(train$rank))
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "ce", act.fct = "logistic", linear.output = FALSE, rep = 5)
plot(network, rep = 1)
plot(network, rep = 2)
plot(network, rep = 3)
plot(network, rep = 4)
plot(network, rep = 5)
network$result.matrix
test <- read_excel("test_data.xlsx")
test$gre <- (test$gre - min(test$gre))/(max(test$gre) - min(test$gre))
test$gpa <- (test$gpa - min(test$gpa))/(max(test$gpa) - min(test$gpa))
test$rank <- (test$rank - min(test$rank))/(max(test$rank) - min(test$rank))
Predict = compute(network,test)
Predict$net.result
prob <- Predict$net.result
pred <- ifelse(prob > 0.5, 1, 0)
pred
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "ce", act.fct = "logistic", linear.output = FALSE)
plot(network, rep = 1)
network$result.matrix
test <- read_excel("test_data.xlsx")
test$gre <- (test$gre - min(test$gre))/(max(test$gre) - min(test$gre))
test$gpa <- (test$gpa - min(test$gpa))/(max(test$gpa) - min(test$gpa))
test$rank <- (test$rank - min(test$rank))/(max(test$rank) - min(test$rank))
Predict = compute(network,test)
Predict$net.result
prob <- Predict$net.result
pred <- ifelse(prob > 0.5, 1, 0)
pred
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "ce", act.fct = "logistic", linear.output = FALSE)
plot(network, rep = 1)
network$result.matrix
test <- read_excel("test_data.xlsx")
test$gre <- (test$gre - min(test$gre))/(max(test$gre) - min(test$gre))
test$gpa <- (test$gpa - min(test$gpa))/(max(test$gpa) - min(test$gpa))
test$rank <- (test$rank - min(test$rank))/(max(test$rank) - min(test$rank))
Predict = compute(network,test)
Predict$net.result
prob <- Predict$net.result
pred <- ifelse(prob > 0.5, 1, 0)
pred
network <- neuralnet(admit ~ ., data = train, hidden = 3, err.fct = "ce", act.fct = "logistic", linear.output = FALSE)
plot(network, rep = 1)
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "ce", act.fct = "logistic", linear.output = FALSE)
plot(network, rep = 1)
plot(network, rep = 2)
network$result.matrix
test <- read_excel("test_data.xlsx")
test$gre <- (test$gre - min(test$gre))/(max(test$gre) - min(test$gre))
test$gpa <- (test$gpa - min(test$gpa))/(max(test$gpa) - min(test$gpa))
test$rank <- (test$rank - min(test$rank))/(max(test$rank) - min(test$rank))
Predict = compute(network,test)
Predict$net.result
prob <- Predict$net.result
pred <- ifelse(prob > 0.5, 1, 0)
pred
prob <- Predict$net.result
pred <- ifelse(prob > 0.5, 1, 0)
pred
plot(network, rep = 1)
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "ce", act.fct = "logistic", linear.output = FALSE)
plot(network, rep = 1)
network$result.matrix
test <- read_excel("test_data.xlsx")
test$gre <- (test$gre - min(test$gre))/(max(test$gre) - min(test$gre))
test$gpa <- (test$gpa - min(test$gpa))/(max(test$gpa) - min(test$gpa))
test$rank <- (test$rank - min(test$rank))/(max(test$rank) - min(test$rank))
Predict = compute(network,test)
Predict$net.result
prob <- Predict$net.result
pred <- ifelse(prob > 0.5, 1, 0)
pred
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "ce", act.fct = "logistic", linear.output = FALSE)
plot(network, rep = 1)
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "ce", act.fct = "logistic", linear.output = FALSE)
plot(network, rep = 1)
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "ce", act.fct = "logistic", linear.output = FALSE)
plot(network, rep = 1)
network$result.matrix
test <- read_excel("test_data.xlsx")
test$gre <- (test$gre - min(test$gre))/(max(test$gre) - min(test$gre))
test$gpa <- (test$gpa - min(test$gpa))/(max(test$gpa) - min(test$gpa))
test$rank <- (test$rank - min(test$rank))/(max(test$rank) - min(test$rank))
Predict = compute(network,test)
Predict$net.result
prob <- Predict$net.result
pred <- ifelse(prob > 0.5, 1, 0)
pred
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "ce", act.fct = "logistic", linear.output = FALSE)
plot(network, rep = 1)
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "ce", act.fct = "logistic", linear.output = FALSE)
plot(network, rep = 1)
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "ce", act.fct = "logistic", linear.output = FALSE)
plot(network, rep = 1)
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "ce", act.fct = "logistic", linear.output = FALSE)
plot(network, rep = 1)
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "ce", act.fct = "logistic", linear.output = FALSE)
plot(network, rep = 1)
network$result.matrix
test <- read_excel("test_data.xlsx")
test$gre <- (test$gre - min(test$gre))/(max(test$gre) - min(test$gre))
test$gpa <- (test$gpa - min(test$gpa))/(max(test$gpa) - min(test$gpa))
test$rank <- (test$rank - min(test$rank))/(max(test$rank) - min(test$rank))
Predict = compute(network,test)
Predict$net.result
prob <- Predict$net.result
pred <- ifelse(prob > 0.5, 1, 0)
pred
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "ce", act.fct = "logistic", linear.output = FALSE)
plot(network, rep = 1)
network$result.matrix
test <- read_excel("test_data.xlsx")
test$gre <- (test$gre - min(test$gre))/(max(test$gre) - min(test$gre))
test$gpa <- (test$gpa - min(test$gpa))/(max(test$gpa) - min(test$gpa))
test$rank <- (test$rank - min(test$rank))/(max(test$rank) - min(test$rank))
Predict = compute(network,test)
Predict$net.result
prob <- Predict$net.result
pred <- ifelse(prob > 0.5, 1, 0)
pred
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "ce", act.fct = "logistic", linear.output = FALSE)
plot(network, rep = 1)
network$result.matrix
test <- read_excel("test_data.xlsx")
test$gre <- (test$gre - min(test$gre))/(max(test$gre) - min(test$gre))
test$gpa <- (test$gpa - min(test$gpa))/(max(test$gpa) - min(test$gpa))
test$rank <- (test$rank - min(test$rank))/(max(test$rank) - min(test$rank))
Predict = compute(network,test)
Predict$net.result
prob <- Predict$net.result
pred <- ifelse(prob > 0.5, 1, 0)
pred
train <- read_excel("big_training_data.xlsx")
train$gre <- (train$gre - min(train$gre))/(max(train$gre) - min(train$gre))
train$gpa <- (train$gpa - min(train$gpa))/(max(train$gpa) - min(train$gpa))
train$rank <- (train$rank - min(train$rank))/(max(train$rank) - min(train$rank))
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "ce", act.fct = "logistic", linear.output = FALSE)
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "ce", act.fct = "logistic", linear.output = FALSE, rep = 10)
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "ce", act.fct = "logistic", linear.output = FALSE, rep = 5)
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "sse", act.fct = "logistic", linear.output = FALSE, rep = 5)
plot(network, rep = 1)
plot(network, rep = "best")
network$result.matrix
test <- read_excel("big_test_data.xlsx")
test$gre <- (test$gre - min(test$gre))/(max(test$gre) - min(test$gre))
test$gpa <- (test$gpa - min(test$gpa))/(max(test$gpa) - min(test$gpa))
test$rank <- (test$rank - min(test$rank))/(max(test$rank) - min(test$rank))
Predict = compute(network,test)
Predict$net.result
prob <- Predict$net.result
pred <- ifelse(prob > 0.5, 1, 0)
pred
knitr::opts_chunk$set(echo = TRUE)
library(neuralnet)
library(readxl)
train <- read_excel("big_training_data.xlsx")
train$gre <- (train$gre - min(train$gre))/(max(train$gre) - min(train$gre))
train$gpa <- (train$gpa - min(train$gpa))/(max(train$gpa) - min(train$gpa))
train$rank <- (train$rank - min(train$rank))/(max(train$rank) - min(train$rank))
network <- neuralnet(admit ~ ., data = train, hidden = 2, err.fct = "sse", act.fct = "logistic", linear.output = FALSE, rep = 5)
plot(network, rep = "best")
network$result.matrix
ci <- confidence.interval(network)
ci <- confidence.interval(network)
confidence.interval(network)
confidence.interval(network)
knitr::opts_chunk$set(echo = TRUE)
library(neuralnet)
library(readxl)
train <- read_excel("big_training_data.xlsx")
train$gre <- (train$gre - min(train$gre))/(max(train$gre) - min(train$gre))
hist(train$gre)
knitr::opts_chunk$set(echo = TRUE)
library(neuralnet)
library(readxl)
train <- read_excel("big_training_data.xlsx")
train$gre <- (train$gre - min(train$gre))/(max(train$gre) - min(train$gre))
hist(train$gre)
train$gpa <- (train$gpa - min(train$gpa))/(max(train$gpa) - min(train$gpa))
hist(train$gpa)
train$rank <- (train$rank - min(train$rank))/(max(train$rank) - min(train$rank))
hist(train$rank)
